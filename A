Tôi đang nhập vào thông tin như này và bị lỗi như sau:
81F1E7180000
ITEM[81F1E7180000]:[81F1E7180000](CHK_SN.ITEM) CHECK OK!(SM)
S30U556005MR10313061
S40[S30U556005MR10313061]S40 (CHK_SN.S40) CHECK OK!(SM)
U556005MR10313061
SCAN SN1 DATA IS NOT CONTINUOUS! - (WK_SMSP_AP_ALLPASS_150)!?[M1](SM)


Đây là code PROCEDURE, hãy tìm nguyên nhân:
-- Start of DDL Script for PROCEDURE TP.WK_SMSP_AP_ALLPASS_150
-- Generated 2025/04/11 from TP@VNOPUS0QA

CREATE OR REPLACE
PROCEDURE TP.WK_SMSP_AP_ALLPASS_150(P_RET          OUT NUMBER,
                                 P_MSG          OUT VARCHAR2,
                                 P_DEV       IN     DEVICE.DEVICE%TYPE,
                                 P_OP        IN     OP.OP%TYPE,
                                 P_DATA      IN     VARCHAR2,
                                 P_WKTYPE    IN     WKTYPE.WKTYPE%TYPE,
                                 P_ACT_NUM   IN     WK_ACT.ACTIDX%TYPE,
                                 P_CUR_SP    IN     ACT_SP.SP%TYPE
                                )
IS
  --
  ----------------------------------------------------
  -- Program   : WK_SMSP_AP_ALLPASS_150
  --
  --
  -- Version   : 1.01  2017/07/07
  --
  -- Parameters: p_DEV    - Device No.
  --             p_WKTYPE - �I�s�� WKTYPE.
  --             p_RET    - ���浲�G
  --             p_MSG    - ����T��

  -- MODIFICATION HISTORY
  -- Person      Date             Comments
  -- ---------   ----------      ---------------------------------------
  -- JSMES       2017/07/07      create it
  -- JACKEY      2020/06/04      Modify it add pflag='A'
  -- JACKEY      2020/07/06      Modify pflag='A'
  -- JACKEY      2021/01/04      ADD pflag='B'
  -- Ming        2025/01/14      Modify pflag='A', Cancel check V_CODE. [VNBU7-20250111003]
  -- Ming        2025/04/09      Modify pflag='E'.
  -- Ming        2025/04/10      Modify pflag='E'. CHANGE SCAN ISN.SSN TO ISNINFO.SN1.[VNBU7-20250410003]
  -- Ming        2025/04/11      Modify pflag='E'. CREATE CATON FUNCTION. SYC WKTYPE=WK_CHKSN2_SN. [VNBU7-20250411001]
  --
  GOERROR                 EXCEPTION;
  V_SPNAME                VARCHAR2(100);
  V_ISN                   ISN.ISN%TYPE;
  VR_ISN                  ISN%ROWTYPE;
  V_COUNT                 NUMBER(20);
  V_OP                    OP.OP%TYPE;
  V_CLASS1                DEVINFO.CLASS%TYPE;
  V_CLASS2                DEVINFO.CLASS%TYPE;
  VR_PALLET               PALLET%ROWTYPE;
  V_MSG                   VARCHAR2(200);
  V_N                     NUMBER(20);
  VR_WKACT                WK_ACT%ROWTYPE;
  V_CNT                   PLS_INTEGER;
  V_CNT1                  PLS_INTEGER;
  V_INFO                  DEVINFO.INFO%TYPE;
  V_CODE                  DEVINFO.INFO%TYPE;
  V_SSN                   DEVINFO.INFO%TYPE;
  V_CITEM                 ITEM.CUSTITEM%TYPE;
  V_S66                   DEVINFO.INFO%TYPE;
  V_CLSSCQTY              CLASS.CLSSCQTY%TYPE;
  VR_ITEM                 ITEM%ROWTYPE;
  V_SCARINFO              DEVINFO.INFO%TYPE;
  V_ITF                   DEVINFO.INFO%TYPE;
  VR_SCARNO               SCARTON%ROWTYPE;
  V_ITEM                  ITEM.ITEM%TYPE;
  VR_SCARTON              SCARTON%ROWTYPE;
  VR_ISN1                 ISN%ROWTYPE;
  V_SNCODE                DEVINFO.INFO%TYPE;
  V_CLSSCRULE             CLASS.CLSSCRULE%TYPE;
  V_CLSSPRULE             CLASS.CLSSPRULE%TYPE;
  V_CLSSPQTY              CLASS.CLSSPQTY%TYPE;
  V_SCARNO                ISN.SCARNO%TYPE;
  V_SN1                   ISNINFO.SN1%TYPE;
  V_SN1_2                 ISNINFO.SN1%TYPE;
  V_ISN1                  ISN.ISN%TYPE;
  VR_ISNINFO              ISNINFO%ROWTYPE;
  VR_DEVICE               DEVICE%ROWTYPE;

  TYPE CUR_ALL IS REF CURSOR;
  CUR_DEVINFO             CUR_ALL;

  V_CLASSISN     CONSTANT DEVINFO.CLASS%TYPE := 100;
BEGIN
  V_SPNAME := '(WK_SMSP_AP_ALLPASS_150)!';
  P_MSG := 'WKTYPE:' || P_WKTYPE;
  SELECT *
    INTO VR_WKACT
    FROM WK_ACT
   WHERE WKTYPE = P_WKTYPE AND ACTIDX = P_ACT_NUM;
  V_COUNT := 0;
  P_MSG := 'DEV_OP';
  SELECT INFO
    INTO V_OP
    FROM DEVINFO
   WHERE DEVICE = P_DEV AND CLASS = 1;
  P_MSG := 'GET DEVICE ';
  SELECT *
    INTO VR_DEVICE
    FROM DEVICE
   WHERE DEVICE = P_DEV;
  V_CLASS1 := GET_STRGET(VR_WKACT.PFIELD, ';', 1);
  V_CLASS2 := GET_STRGET(VR_WKACT.PFIELD, ';', 2);

  IF INSTR(VR_WKACT.PFLAG, 'A') > 0 THEN
    P_MSG := 'GET SSN FROM DEVINFO';
    SELECT INFO
      INTO V_SSN
      FROM DEVINFO
     WHERE DEVICE = P_DEV AND CLASS = V_CLASS1;
/*    P_MSG := 'GET CODE FROM DEVINFO,CLASS:901';
    SELECT INFO
      INTO V_CODE
      FROM DEVINFO
     WHERE DEVICE = P_DEV AND CLASS = 901;*/
    P_MSG := 'GET ITEM FROM DEVINFO,CLASS:901';
    SELECT INFO
      INTO V_ITEM
      FROM DEVINFO
     WHERE DEVICE = P_DEV AND CLASS = 901;
    P_MSG := 'GET CODE FROM DEVINFO,CLASS:902';
    SELECT INFO
      INTO V_S66
      FROM DEVINFO
     WHERE DEVICE = P_DEV AND CLASS = 902;
    P_MSG := 'FIND ISN BY SSN:' || V_SSN;
    SELECT *
      INTO VR_ISN
      FROM ISN
     WHERE SSN = V_SSN;
    SELECT COUNT(INFO)
      INTO V_CNT
      FROM DEVINFO
     WHERE DEVICE = P_DEV AND CLASS BETWEEN V_CLASS1 AND V_CLASS2;
    P_MSG := 'ITEM:' || VR_ISN.ITEM;
    SELECT CLSSCQTY
      INTO V_CLSSCQTY
      FROM CLASS
     WHERE TYPE = 'ITEM' AND CLSNM = VR_ISN.ITEM;
    IF V_CNT <> V_CLSSCQTY THEN
      P_MSG := 'SCANED SSN AMOUNT:' || V_CNT || ', NOT MATCH CLASS.CLSSCQTY:' || V_CLSSCQTY;
      RAISE GOERROR;
    END IF;
    IF V_ITEM <> VR_ISN.ITEM THEN
       P_MSG := 'SSN.ITEM['||VR_ISN.ITEM||'] NOT MATCH SCAN ITEM['||V_ITEM||']';
      RAISE GOERROR;
    END IF;
  ELSIF INSTR(VR_WKACT.PFLAG, 'B') > 0 THEN
    P_MSG := 'GET ISN FROM DEVINFO';
    SELECT INFO
      INTO V_ISN
      FROM DEVINFO
     WHERE DEVICE = P_DEV AND CLASS = V_CLASS1;
    P_MSG := 'FIND ISN BY ISN:' || V_ISN;
    SELECT *
      INTO VR_ISN
      FROM ISN
     WHERE ISN = V_ISN;
    P_MSG := 'FIND ITEM BY ISN.ITEM:' || VR_ISN.ITEM;
    SELECT *
      INTO VR_ITEM
      FROM ITEM
     WHERE ITEM = VR_ISN.ITEM;
    P_MSG := 'GET SCARINFO FROM DEVINFO,CLASS:952';
    SELECT INFO
      INTO V_SCARINFO
      FROM DEVINFO
     WHERE DEVICE = P_DEV AND CLASS = 952;
    IF SUBSTR(V_SCARINFO, 1, 9) <> NVL(VR_ITEM.CUSTITEM, '?')
   AND SUBSTR(V_SCARINFO, 1, 10) <> NVL(VR_ITEM.CUSTITEM, '?') THEN
      P_MSG :=
           'SCANED SCARNO:'
        || V_SCARINFO
        || ' SUB 1-9 OR 1-10 NOT MATCH WIHT ISN.ITEM.CUSTITEM:'
        || NVL(VR_ITEM.CUSTITEM, '?');
      RAISE GOERROR;
    END IF;
    SELECT COUNT(*)
      INTO V_CNT
      FROM MODEL_D
     WHERE MODELID = VR_ISN.ITEM AND ATTRID = 'CHK_ITFLAB' AND ATTRITEM = 1;
    SELECT COUNT(INFO)
      INTO V_CNT1
      FROM DEVINFO
     WHERE DEVICE = P_DEV AND CLASS = 953;
    IF V_CNT = 0 AND V_CNT1 <> 0 THEN
      P_MSG := 'YOU CANNOT SCAN ITF LABEL,PLS CHK!';
      RAISE GOERROR;
    ELSIF V_CNT > 0 AND V_CNT1 = 0 THEN
      P_MSG := 'YOU MUST SCAN ITF LABEL,PLS CHK!';
      RAISE GOERROR;
    ELSIF V_CNT > 0 AND V_CNT1 > 0 THEN
      P_MSG := 'GET ITF LBAEL FROM DEVINFO,CLASS:902';
      SELECT INFO
        INTO V_ITF
        FROM DEVINFO
       WHERE DEVICE = P_DEV AND CLASS = 953;
      IF V_ITF <> NVL(VR_ITEM.CUSTSKU, '?') THEN
        P_MSG := 'SCANED ITF LBAEL:' || V_ITF || ' NOT MATCH WIHT ISN.ITEM.CUSTSKU:' || NVL(VR_ITEM.CUSTSKU, '?');
        RAISE GOERROR;
      END IF;
    END IF;
    SELECT COUNT(*)
      INTO V_CNT
      FROM SCARTON
     WHERE CUSTSCAR = V_SCARINFO;
    IF V_CNT <> 0 THEN
      P_MSG := 'CUSTSCAR:' || V_SCARINFO || ' IS EXSIT IN OTHER SCARTON';
      RAISE GOERROR;
    END IF;
  ELSIF INSTR(VR_WKACT.PFLAG, 'E') > 0 THEN
       P_MSG := 'GET ITEM OF DEVINFO[88] ';
       SELECT INFO
         INTO V_ITEM
         FROM DEVINFO
        WHERE DEVICE = P_DEV AND CLASS = 88;
       P_MSG := 'GET SN1 OF DEVINFO[89] ';
       SELECT INFO
         INTO V_SNCODE
         FROM DEVINFO
        WHERE DEVICE = P_DEV AND CLASS = 89;
       P_MSG := 'GET SSN FROM DEVINFO[901]'||V_SSN;
       SELECT INFO
         INTO V_SN1
         FROM DEVINFO
        WHERE DEVICE = P_DEV AND CLASS = V_CLASS1;
       P_MSG := 'GET ISN BY ISNINFO'||V_SN1;
       SELECT ISN
         INTO V_ISN
         FROM ISNINFO
        WHERE SN1 = V_SN1;
       P_MSG := '[E]FIND ISN BY ISNINFO.SN1:' || V_SN1;
       SELECT *
        INTO VR_ISN
        FROM ISN
       WHERE ISN = V_ISN;
      P_MSG := 'GET CLASS OF ITEM:' || VR_ISN.ITEM;
      SELECT CLSSCQTY, CLSSCRULE, CLSSPRULE, CLSSPQTY
        INTO V_CLSSCQTY, V_CLSSCRULE, V_CLSSPRULE, V_CLSSPQTY
        FROM CLASS
       WHERE TYPE = 'ITEM' AND CLSNM = VR_ISN.ITEM;
       IF V_CLSSCQTY IS NULL OR V_CLSSCRULE IS NULL OR V_CLSSPRULE IS NULL OR  V_CLSSPQTY IS NULL THEN
          P_MSG:='THIS ITEM['||VR_ISN.ITEM||'] HAVE CARTON OR PALLET RULE/QTY NOT MAINTAIN IN CLASS.';
         RAISE GOERROR;
       END IF;
       IF V_ITEM <> VR_ISN.ITEM THEN
          P_MSG:='SCAN ITEM['||V_ITEM||'] NOT MATCH SSN.ITEM['||VR_ISN.ITEM||']';
         RAISE GOERROR;
       END IF;
     --CHECK HAVE CARTON OR NOT
     BEGIN
      P_MSG:='GET FINAL SNCODE ISN';
      SELECT F.ISN
        INTO V_ISN1
        FROM ISNINFO F, ISNINFO I
       WHERE F.SN2 = V_SNCODE
         AND I.ISN=F.ISN
       ORDER BY SUBSTR(I.SN1,-14) DESC
       FETCH FIRST 1 ROWS ONLY;
     EXCEPTION WHEN NO_DATA_FOUND THEN
        V_ISN1:= NULL;
        V_SCARNO:= NULL;
     END;
     IF V_ISN1 IS NULL THEN
        CHK_RULE_SP('CHKSN_S66', V_SNCODE, NULL, VR_ISN.ITEM, P_RET, P_MSG);
        IF P_RET = 0 THEN
           P_MSG := 'SCANED S40 SUB 1-3 NOT S40';
          RAISE GOERROR;
        END IF;
        IF V_SN1 <> SUBSTR(V_SNCODE, 4) THEN
           P_MSG := 'SCANED S66 SUB 4-20:' || SUBSTR(V_SNCODE, 4) || ',NOT MATCH WITH SCANED FIRST SN1:' || V_SN1;
          RAISE GOERROR;
        END IF;
     ELSE
       SELECT SN1, SCARNO
         INTO V_SN1_2, V_SCARNO
         FROM ISNINFO I, ISN S
        WHERE I.ISN = V_ISN1
          AND S.ISN=I.ISN;
         IF LPAD(TO_CHAR(TO_NUMBER(SUBSTR(V_SN1_2, 11, 7)) + 1), 7, '0') <> SUBSTR(V_SN1, 11, 7) THEN
            P_MSG := 'SCAN SN1 DATA IS NOT CONTINUOUS!';
           RAISE GOERROR;
         END IF;
     END IF;
     SELECT COUNT(*)
       INTO V_CNT
       FROM SCARTON
      WHERE SCARNO = V_SCARNO
        AND CLOSE < 1;
     IF V_SCARNO IS NULL OR V_CNT = 0 THEN
        --CREATE NEW CARTON
        GET_NUM(v_CLSSCRULE,'',1,p_DEV,p_RET,p_MSG,NULL, v_ISN);
        IF P_RET=1 THEN
           v_SCARNO:= p_MSG;
        ELSE
          RAISE GOERROR;
        END IF;
        p_MSG := 'INS SCARTON:'||v_SCARNO;
        INSERT INTO SCARTON(SO,SOLINE,SCARTON,OP,QTY,NW,GW,LINE,SCARSTR,PKORD,BOXFLAG,SHOP,ITEM,LASTUPD,
              MO,MODEL,MFMODEL,TARQTY,SCARNO,CLOSE,DEVICE)
        VALUES(VR_ISN.SO,VR_ISN.SOLINE, 0,V_OP,0,0,0,VR_DEVICE.LINE,'1',0,'',VR_ISN.SHOP,VR_ISN.ITEM,SYSDATE,
             VR_ISN.MO,VR_ISN.MODEL,VR_ISN.MFMODEL,v_CLSSCQTY,v_SCARNO,0,p_DEV);
        IF SQL%ROWCOUNT = 0 THEN
           p_MSG := 'INSERT SCARTON['|| v_SCARNO ||']OCCURS ERROR!';
          RAISE GOERROR;
        END IF;
     END IF;
     P_MSG:='GET SCARTON DATA';
     SELECT *
       INTO VR_SCARTON
       FROM SCARTON
      WHERE SCARNO = v_SCARNO;
      IF vr_ISN.PALLET IS NOT NULL THEN
         UPDATE SCARTON SET PALLET = VR_ISN.PALLET WHERE SCARNO = VR_SCARTON.SCARNO;
         IF SQL%ROWCOUNT = 0 THEN
            p_MSG := 'UPDATE SCARTON:['|| VR_SCARTON.SCARNO||'] OCCURS ERROR!';
          RAISE GOERROR;
         END IF;
      END IF;
      p_MSG := 'UPDATE ISN';
      UPDATE ISN SET SCARNO = VR_SCARTON.SCARNO,LASTUPD = SYSDATE,SCARTON=NVL(TO_CHAR(VR_SCARTON.SCARTON),'0') WHERE ISN = VR_ISN.ISN;
      IF VR_SCARTON.QTY + 1 >= VR_SCARTON.TARQTY THEN
         UPDATE SCARTON SET CLOSE =1, QTY=QTY+1,LASTUPD = SYSDATE WHERE SCARNO=v_SCARNO;
         IF SQL%ROWCOUNT = 0 THEN
            p_MSG :='CLOSE SCANO:['||v_SCARNO ||'] OCCURS ERROR!';
          RAISE GOERROR;
         END IF;
         P_MSG:='CLEAR THE ITEM AND SN_CODE';
         DELETE DEVINFO WHERE DEVICE=P_DEV AND CLASS IN ('88','89');
      ELSE
        UPDATE SCARTON SET QTY = QTY + 1, LASTUPD = SYSDATE WHERE SCARNO = v_SCARNO;
        IF SQL%ROWCOUNT = 0 THEN
           p_MSG :='ADD IN SCARNO:'||v_SCARNO||'] OCCURS ERROR!';
          RAISE GOERROR;
        END IF;
      END IF;
  END IF;
  OPEN CUR_DEVINFO FOR
    SELECT   INFO
        FROM DEVINFO
       WHERE DEVICE = P_DEV AND CLASS BETWEEN V_CLASS1 AND V_CLASS2
    ORDER BY CLASS;
  FETCH CUR_DEVINFO INTO V_INFO;
  WHILE CUR_DEVINFO%FOUND
  LOOP
    IF INSTR(VR_WKACT.PFLAG, 'A') > 0 THEN
      P_MSG := 'FIND ISN BY SSN:' || V_INFO;
      SELECT *
        INTO VR_ISN
        FROM ISN
       WHERE SSN = V_INFO;
      DEVINFO_INSUPD(P_DEV, V_CLASSISN, VR_ISN.ISN, P_RET, P_MSG);
      IF P_RET = 0 THEN
        CLOSE CUR_DEVINFO;
        RAISE GOERROR;
      END IF;
      SELECT COUNT(*)
        INTO V_N
        FROM ISNINFO
       WHERE ISN = VR_ISN.ISN;
      IF V_N = 0 THEN
        INSERT INTO ISNINFO(ISN)
             VALUES (VR_ISN.ISN);
      END IF;
      P_MSG := 'UPDATE ISNINFO.SN1 ERORR';
      UPDATE ISNINFO
         /*SET SN1 = V_S66 || V_CODE*/
         SET SN1 = V_S66
       WHERE ISN = VR_ISN.ISN;
    ELSIF INSTR(VR_WKACT.PFLAG, 'E') > 0 THEN
      P_MSG := 'FIND ISN BY ISNINFO.SN1:' || V_INFO;
      SELECT *
        INTO VR_ISNINFO
        FROM ISNINFO
       WHERE SN1 = V_INFO;
      DEVINFO_INSUPD(P_DEV, V_CLASSISN, VR_ISNINFO.ISN, P_RET, P_MSG);
      IF P_RET = 0 THEN
        CLOSE CUR_DEVINFO;
        RAISE GOERROR;
      END IF;
    ELSE
      DEVINFO_INSUPD(P_DEV, V_CLASSISN, V_INFO, P_RET, P_MSG);
      IF P_RET = 0 THEN
        CLOSE CUR_DEVINFO;
        RAISE GOERROR;
      END IF;
    END IF;
    WK_SMSP_AUTO_CAR_PAL(P_RET, P_MSG, P_DEV, P_OP, V_INFO, P_WKTYPE, P_ACT_NUM, P_CUR_SP);
    V_MSG := P_MSG;
    IF P_RET = 0 THEN
      CLOSE CUR_DEVINFO;
      RAISE GOERROR;
    END IF;
    IF INSTR(VR_WKACT.PFLAG, 'A') > 0 OR INSTR(VR_WKACT.PFLAG, 'B') > 0 OR INSTR(VR_WKACT.PFLAG, 'E') > 0 THEN
      AP_ISN_PASS(P_DEV, V_INFO, P_RET, P_MSG, 'V', P_WKTYPE);
      IF P_RET = 0 THEN
        CLOSE CUR_DEVINFO;
        RAISE GOERROR;
      END IF;
    ELSE
      AP_ISN_PASS(P_DEV, V_INFO, P_RET, P_MSG, 'A', P_WKTYPE);
      IF P_RET = 0 THEN
        CLOSE CUR_DEVINFO;
        RAISE GOERROR;
      END IF;
    END IF;
    V_COUNT := V_COUNT + 1;
    FETCH CUR_DEVINFO INTO V_INFO;
  END LOOP;
  CLOSE CUR_DEVINFO;
  IF INSTR(VR_WKACT.PFLAG, 'B') > 0 THEN
    P_MSG := 'FIND ISN BY ISN:' || V_ISN;
    SELECT *
      INTO VR_ISN
      FROM ISN
     WHERE ISN = V_ISN;
    SELECT *
      INTO VR_SCARNO
      FROM SCARTON
     WHERE SCARNO = VR_ISN.SCARNO;
    IF VR_SCARNO.CUSTSCAR IS NULL THEN
      UPDATE SCARTON
         SET CUSTSCAR = V_SCARINFO
       WHERE SCARNO = VR_ISN.SCARNO;
    ELSE
      P_MSG := 'ISN.SCARTON.CUSTSCAR:' || V_SCARINFO || ' EXSIT!';
      RAISE GOERROR;
    END IF;
    IF VR_SCARNO.CLOSE = 0 THEN
      UPDATE SCARTON
         SET CLOSE = 1
       WHERE SCARNO = VR_ISN.SCARNO;
    END IF;
  END IF;
  IF INSTR(VR_WKACT.PFLAG, 'E') > 0 THEN
    P_MSG := 'FIND ISN BY ISN:' || V_ISN;
    SELECT *
      INTO VR_ISN
      FROM ISN
     WHERE ISN = V_ISN;
     P_MSG := 'UPDATE ISNINFO.SN1 ERORR';
     UPDATE ISNINFO
        SET SN2 = V_SNCODE
     WHERE ISN = VR_ISN.ISN;
     P_MSG := 'CARTON INFO['||VR_ISN.SCARNO||']';
     SELECT * INTO VR_SCARTON FROM SCARTON WHERE SCARNO= VR_ISN.SCARNO;
     P_MSG:='PALLET INFO';
     SELECT * INTO VR_PALLET FROM PALLET WHERE PALLET = VR_ISN.PALLET;
      V_MSG := ' CARTON:'||VR_SCARTON.SCARNO||'['||TO_CHAR(VR_SCARTON.QTY )||'/'
             ||TO_CHAR(VR_SCARTON.TARQTY)||']PALLET:'||NVL(VR_PALLET.PALLET, 'NA')||'['||TO_CHAR(VR_PALLET.QTY)||'/'||TO_CHAR(VR_PALLET.TARGET)||']';
  END IF;
  IF INSTR(VR_WKACT.PFLAG, 'A') > 0 OR INSTR(VR_WKACT.PFLAG, 'B') > 0 OR INSTR(VR_WKACT.PFLAG, 'E') > 0 THEN
    P_RET := 1;
    P_MSG := V_MSG || 'TOTAL:' || TO_CHAR(V_COUNT) || ' PCS OF ISN PASS![1vMSGB]';
  ELSE
    V_MSG := P_MSG;
    P_RET := 1;
    P_MSG := V_MSG || 'TOTAL:' || TO_CHAR(V_COUNT) || ' PCS OF ISN PASS![1vMSGB]';
  END IF;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    P_MSG := P_MSG || ' NO DATA FOUND!' || V_SPNAME;
    P_RET := 0;
  WHEN GOERROR THEN
    P_RET := 0;
    P_MSG := P_MSG || ' - ' || V_SPNAME;
  WHEN OTHERS THEN
    P_RET := 0;
    P_MSG := P_MSG || '-' || SUBSTR(SQLERRM, 1, 200) || ' - ' || V_SPNAME;
END;
/

-- End of DDL Script for PROCEDURE TP.WK_SMSP_AP_ALLPASS_150



Tôi đang gặp lỗi SCAN SN RULE AND AOI RULE NOT MATCH! ở đoạn SP này. hãy giúp sửa nó, tôi cần điền giá trị như nào cho data_1 = data_2?

PROCEDURE    MAP_AOILOCSN(P_DEV     IN     DEVICE.DEVICE%TYPE,
                       P_TYP     IN     VARCHAR2,
                       P_FIELD   IN     VARCHAR2,
                       P_FLAG    IN     VARCHAR2,
                       P_ISN     IN     ISN.ISN%TYPE,
                       P_RET        OUT NUMBER,
                       P_MSG        OUT VARCHAR2
                      )
IS
  --------------------------------
  -- Program   : MAP_AOILOCSN
  --
  -- Version   : 1.10  2003/02/27
  --
  -- Parameters: p_FLAG : 'C' - ISN »P SN ¤¬´«.
  --                      'R' - CHECK SN WITH CHKRULE
  --
  --
  -- MODIFICATION HISTORY
  --  Person        Date      Comments
  -- ---------   ----------  -----------------------------------------------
  -- Lixiang     2010/03/04  Add p_FLAG 'R'
  -- Lixiang     2013/04/02  Add p_FLAG 'X'
  --
  EXERROR                     EXCEPTION;
  GOEND                       EXCEPTION;
  V_ISN                       ISN.ISN%TYPE;
  V_ITEM                      ITEM%ROWTYPE;
  V_OP                        OP.OP%TYPE;
  V_SPNAME                    VARCHAR2(30);
  V_SN                        DEVINFO.INFO%TYPE;
  V_SSN                       DEVINFO.INFO%TYPE;
  V_INFO                      DEVINFO.INFO%TYPE;
  V_CLSEC                     DEVINFO.CLASS%TYPE;
  V_TZ                        TZ.TZ%TYPE;
  V_MO                        MO.MO%TYPE;
  V_MOROW                     MO%ROWTYPE;
  V_ROUTEFLAG                 ROUTE.ROUTEFLAG%TYPE;
  V_N                         PLS_INTEGER;
  V_SNCNT                     PLS_INTEGER;
  V_LOCCNT                    PLS_INTEGER;
  V_EC                        DEVINFO.INFO%TYPE;
  V_SEQMAX                    DEVINFO.SEQ%TYPE;
  V_DEV                       DEVICE%ROWTYPE;
  V_SQLSTMT                   VARCHAR2(1000);
  V_CURHANDLE                 PLS_INTEGER;
  V_ROWSPROCESSED             PLS_INTEGER;
  V_VROUTE                    ROUTE.ROUTE%TYPE;
  V_STEP                      ROUTE_STEP.STEP%TYPE;
  V_ROUTE_STEP                ROUTE_STEP%ROWTYPE;
  V_ORIGMSG                   VARCHAR2(50);
  V_STR                       VARCHAR2(50);
  V_LOCALL                    PLS_INTEGER;
  V_AOILOC                    PLS_INTEGER;
  VR_ISN                      ISN%ROWTYPE;
  VR_SNS                      DEVINFO%ROWTYPE;
  V_BOARDCNT                  MO.BOARDCNT%TYPE;
  V_STR1                      VARCHAR2(100);
  V_DATA1                     VARCHAR2(100);
  V_DATA2                     VARCHAR2(100);
  --
  -- Declare constants
  --
  V_CLASSOP          CONSTANT DEVINFO.CLASS%TYPE := 1; /* OP                */
  C_CLASSSNS         CONSTANT DEVINFO.CLASS%TYPE := 42; /* RESERVED SN DATA IN LOOP */
  V_CLASSISN         CONSTANT DEVINFO.CLASS%TYPE := 100; /* ISN               */
  V_CLASSSSN         CONSTANT DEVINFO.CLASS%TYPE := 106; /* SSN               */
  C_CLASSAOILOC      CONSTANT DEVINFO.CLASS%TYPE := 111; /* AOI Location.     */
  C_CLASSAOILOC0     CONSTANT DEVINFO.CLASS%TYPE := 113; /* AOI Location All. */
  V_CLASSOISN        CONSTANT DEVINFO.CLASS%TYPE := 1000; /* Replaced ISN      */


  CURSOR CUR_SNS
  IS
      SELECT *
        FROM DEVINFO
       WHERE DEVICE = P_DEV AND CLASS BETWEEN 700 AND 749
    ORDER BY CLASS;

  CURSOR CUR_ISNS(CP_AOIISN ISN.AOIISN%TYPE)
  IS
      SELECT *
        FROM ISN
       WHERE AOIISN = CP_AOIISN AND AOISTATUS = 0
    ORDER BY AOILOC;
BEGIN
  V_SPNAME := '(MAP_AOILOCSN)';
  V_ORIGMSG := P_MSG;
  /* ¯d·N !! p_ISN ¤w¥¼¥²¬O ISN ¡Aµ{¦¡¤¤»Ý§ì ISN ªÌ½Ð¥Î v_ISN */
  BEGIN
    SELECT INFO
      INTO V_ISN
      FROM DEVINFO
     WHERE DEVICE = P_DEV AND CLASS = V_CLASSISN;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      P_MSG := 'ISN NOT SCANED!';
      RAISE EXERROR;
  END;
  BEGIN
    SELECT NVL(TO_NUMBER(INFO), 0)
      INTO V_LOCALL
      FROM DEVINFO
     WHERE DEVICE = P_DEV AND CLASS = C_CLASSAOILOC0;

    SELECT NVL(TO_NUMBER(INFO), 0)
      INTO V_AOILOC
      FROM DEVINFO
     WHERE DEVICE = P_DEV AND CLASS = C_CLASSAOILOC;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      P_MSG := 'ISN WITH COMBO BOARD,NEED INPUT PCB LOCATION!';
      RAISE EXERROR;
    WHEN OTHERS THEN
      P_MSG := '[LOC]' || SQLERRM;
      RAISE EXERROR;
  END;

  SELECT COUNT(*)
    INTO V_SNCNT
    FROM DEVINFO
   WHERE DEVICE = P_DEV AND CLASS BETWEEN 700 AND 749;
  -- tool_do_log(v_locAll||'/'||v_aoiloc||'/'||v_snCnt,'P3287',p_ret, p_msg);
  IF V_LOCALL <= 0 THEN
    SELECT COUNT(*)
      INTO V_SNCNT
      FROM DEVINFO
     WHERE DEVICE = P_DEV AND CLASS BETWEEN 700 AND 749;
    IF V_SNCNT > 1 THEN
      P_MSG := 'TOO MANY SN(s) [' || V_SNCNT || ']!';
      RAISE EXERROR;
    END IF;

    SELECT INFO
      INTO V_SN
      FROM DEVINFO
     WHERE DEVICE = P_DEV AND CLASS = 700;
  ELSE
    BEGIN
      --BEGIN
      --SELECT COUNT(*)
      --INTO v_locCnt
      --FROM isn
      --WHERE aoiisn = v_isn
      --AND aoistatus = 0;
      SELECT BOARDCNT
        INTO V_BOARDCNT
        FROM MO
       WHERE MO = (SELECT MO
                     FROM ISN
                    WHERE ISN = P_ISN);
      TOOL_DO_LOG(P_ISN || ';' || V_SNCNT || ';' || V_BOARDCNT, 'PEGGY', P_RET, P_MSG);
      TOOL_DO_LOG(P_ISN || ';' || V_SNCNT || ';' || V_BOARDCNT, 'PEGGY', P_RET, P_MSG);
      --IF v_snCnt != v_locCnt THEN
      IF V_SNCNT != V_BOARDCNT THEN
        P_MSG := 'SN NUMBER SCANED NOT MATCH AOILOC [' || V_SNCNT || '/' || V_BOARDCNT || ']!';
        RAISE EXERROR;
      END IF;
      --END;
      SELECT INFO
        INTO V_SN
        FROM DEVINFO
       WHERE DEVICE = P_DEV AND CLASS = 700 + V_AOILOC - 1;
    EXCEPTION
      WHEN EXERROR THEN
        RAISE EXERROR;
      WHEN NO_DATA_FOUND THEN
        P_MSG := 'SN(s) SCANED NOT ENOUGH [' || V_AOILOC || '].';
        RAISE EXERROR;
      WHEN OTHERS THEN
        P_MSG := '[SN]' || SQLERRM;
        RAISE EXERROR;
    END;
  END IF;
  --TOOL_DO_LOG(v_snCnt||';'||v_locCnt,'PEGGY1',p_RET,p_MSG);
  /*SELECT COUNT(*)
    INTO v_locCnt
    FROM isn
   WHERE aoiisn = v_isn
     AND aoistatus = 0;
  TOOL_DO_LOG(v_snCnt||';'||v_locCnt,'PEGGY1',p_RET,p_MSG);
  IF v_snCnt != v_locCnt THEN
    p_msg := 'SN NUMBER SCANED NOT MATCH AOILOC ['||v_snCnt||'/'||v_locCnt||']!';
    RAISE exerror;
  END IF;*/
  IF INSTR(P_FLAG, 'R') <> 0 THEN
    V_STR := '0000';
    CHK_RULE_SP(P_TYP, V_SN, NULL, V_STR, P_RET, P_MSG);
    IF P_RET = 0 THEN
      RAISE EXERROR;
    END IF;
  END IF;
  IF INSTR(P_FLAG, 'X') <> 0 THEN
    IF P_TYP IS NULL THEN
      P_MSG := 'p_TYP CAN NOT NULL!';
      RAISE EXERROR;
    END IF;
    P_MSG := 'p_TYP CAN NOT NULL!' || P_TYP;
    --RAISE EXERROR;
    V_STR := GET_STRGET(P_TYP, ';', 1);
    P_MSG := 'RULETYPE 1 [' || V_STR || '] ';
    SELECT RULESTR
      INTO V_STR1
      FROM CHKRULE_D
     WHERE RULETYPE = V_STR;
    P_MSG := 'GET DATA 1';
    GET_RULE_STRING(V_ISN, V_STR1, P_RET, P_MSG, V_DATA1);
    IF P_RET = 0 THEN
      RAISE EXERROR;
    END IF;
    V_STR := GET_STRGET(P_TYP, ';', 2);
    P_MSG := 'RULETYPE 2 [' || V_STR || '] ';
    SELECT RULESTR
      INTO V_STR1
      FROM CHKRULE_D
     WHERE RULETYPE = V_STR;
    P_MSG := 'GET DATA 2';
    GET_RULE_STRING(V_SN, V_STR1, P_RET, P_MSG, V_DATA2);
    IF P_RET = 0 THEN
      RAISE EXERROR;
    END IF;
    IF V_DATA1 <> V_DATA2 THEN
      P_MSG := 'SCAN SN RULE AND AOI RULE NOT MATCH!';
      RAISE EXERROR;
    END IF;
  END IF;

  IF INSTR(P_FLAG, 'C') <> 0 THEN
    ISN_SN_CHANGE(V_ISN, V_SN, P_RET, P_MSG);
    IF P_RET = 0 THEN
      RAISE EXERROR;
    END IF;
    INS_DEVINFO(P_DEV, V_ISN, 1000, P_RET, P_MSG);
    IF P_RET = 0 THEN
      RAISE EXERROR;
    END IF;
    DEVINFO_INSUPD(P_DEV, V_CLASSISN, V_SN, P_RET, P_MSG);
    IF P_RET = 0 THEN
      RAISE EXERROR;
    END IF;
    -- UPDATE DEVINFO SET INFO=v_SN WHERE CLASS=v_CLASSISN AND DEVICE=p_DEV;
    V_STR := V_ISN;
    V_ISN := V_SN;
    V_SN := V_STR;
  END IF;

  SELECT COUNT(*)
    INTO V_N
    FROM ISNINFO
   WHERE ISN = V_ISN;
  IF V_N = 0 THEN
    INSERT INTO ISNINFO(ISN)
         VALUES (V_ISN);
  END IF;

  IF NVL(P_FIELD, 'NULL') <> 'NULL' THEN
    SELECT COUNT(*)
      INTO V_N
      FROM USER_TAB_COLUMNS
     WHERE TABLE_NAME = 'ISN' AND COLUMN_NAME = P_FIELD;
    IF V_N = 1 THEN
      V_SQLSTMT := 'UPDATE ISN SET ' || P_FIELD || ' = :hp_SN WHERE ISN = :hp_ISN';
    ELSE
      V_SQLSTMT := 'UPDATE ISNINFO SET ' || P_FIELD || ' = :hp_SN WHERE ISN = :hp_ISN';
    END IF;

    EXECUTE IMMEDIATE V_SQLSTMT USING V_SN, V_ISN;
  END IF;


  -- OPEN cur_isns(v_isn);
  -- FETCH cur_isns INTO vr_isn;
  -- FOR vr_devinfo IN cur_sns LOOP
  --   IF nvl(p_field,'NULL') <> 'NULL' THEN
  --     SELECT COUNT(*)
  --       INTO v_N
  --       FROM USER_TAB_COLUMNS
  --      WHERE TABLE_NAME='ISN'
  --        AND COLUMN_NAME=p_FIELD;
  --     IF v_N = 1 THEN
  --       v_SqlStmt := 'UPDATE ISN SET '||p_FIELD||' = :hp_SN WHERE ISN = :hp_ISN';
  --     ELSE
  --       v_SqlStmt := 'UPDATE ISNINFO SET '||p_FIELD||' = :hp_SN WHERE ISN = :hp_ISN';
  --     END IF;

  --     EXECUTE IMMEDIATE v_SqlStmt USING vr_devinfo.info, vr_isn.isn;

  --   END IF;
  --   FETCH cur_isns INTO vr_isn;
  -- END LOOP;
  -- CLOSE cur_isns;
  V_INFO := NULL;
  OPEN CUR_SNS;
  FETCH CUR_SNS INTO VR_SNS;
  V_INFO := VR_SNS.INFO;
  LOOP
    FETCH CUR_SNS INTO VR_SNS;
    IF CUR_SNS%NOTFOUND THEN
      EXIT;
    END IF;
    V_INFO := V_INFO || ';' || VR_SNS.INFO;
  END LOOP;
  CLOSE CUR_SNS;
  DEVINFO_INSUPD(P_DEV, C_CLASSSNS, V_INFO, P_RET, P_MSG);
  IF P_RET = 0 THEN
    RAISE EXERROR;
  END IF;

  P_MSG := V_ORIGMSG;
  P_RET := 1;
EXCEPTION
  WHEN EXERROR THEN
    IF CUR_SNS%ISOPEN THEN
      CLOSE CUR_SNS;
    END IF;
    P_MSG := P_MSG || V_SPNAME;
    P_RET := 0;
  WHEN OTHERS THEN
    IF CUR_SNS%ISOPEN THEN
      CLOSE CUR_SNS;
    END IF;
    P_MSG := SQLERRM || V_SPNAME;
    P_RET := 0;
END; -- Procedure MAP_AOILOCSN
